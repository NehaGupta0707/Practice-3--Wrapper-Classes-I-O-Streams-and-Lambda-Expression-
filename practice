import java.sql.*;
import java.util.*;

class Student {
    int studentID;
    String name;
    String department;
    double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }
}

class DBController {
    private Connection conn;

    public DBController(String url, String user, String password) {
        try {
            conn = DriverManager.getConnection(url, user, password);
            conn.setAutoCommit(false);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void displayEmployees() {
        String query = "SELECT * FROM Employee";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            System.out.println("EmpID\tName\tSalary");
            while (rs.next()) {
                System.out.println(rs.getInt("EmpID") + "\t" + rs.getString("Name") + "\t" + rs.getDouble("Salary"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void createProduct(int id, String name, double price, int qty) {
        String query = "INSERT INTO Product(ProductID, ProductName, Price, Quantity) VALUES(?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setInt(1, id);
            ps.setString(2, name);
            ps.setDouble(3, price);
            ps.setInt(4, qty);
            ps.executeUpdate();
            conn.commit();
            System.out.println("Product added successfully!");
        } catch (SQLException e) {
            try { conn.rollback(); } catch(SQLException ex) { ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void readProducts() {
        String query = "SELECT * FROM Product";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            System.out.println("ID\tName\tPrice\tQty");
            while(rs.next()) {
                System.out.println(rs.getInt("ProductID") + "\t" + rs.getString("ProductName") + "\t" + rs.getDouble("Price") + "\t" + rs.getInt("Quantity"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void updateProduct(int id, String name, double price, int qty) {
        String query = "UPDATE Product SET ProductName=?, Price=?, Quantity=? WHERE ProductID=?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, name);
            ps.setDouble(2, price);
            ps.setInt(3, qty);
            ps.setInt(4, id);
            int updated = ps.executeUpdate();
            if(updated > 0) {
                conn.commit();
                System.out.println("Product updated successfully!");
            } else {
                System.out.println("Product not found!");
            }
        } catch (SQLException e) {
            try { conn.rollback(); } catch(SQLException ex){ ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void deleteProduct(int id) {
        String query = "DELETE FROM Product WHERE ProductID=?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setInt(1, id);
            int deleted = ps.executeUpdate();
            if(deleted > 0) {
                conn.commit();
                System.out.println("Product deleted successfully!");
            } else {
                System.out.println("Product not found!");
            }
        } catch (SQLException e) {
            try { conn.rollback(); } catch(SQLException ex){ ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void addStudent(Student s) {
        String query = "INSERT INTO Student(StudentID, Name, Department, Marks) VALUES(?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setInt(1, s.studentID);
            ps.setString(2, s.name);
            ps.setString(3, s.department);
            ps.setDouble(4, s.marks);
            ps.executeUpdate();
            conn.commit();
            System.out.println("Student added!");
        } catch (SQLException e) {
            try { conn.rollback(); } catch(SQLException ex){ ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void viewStudents() {
        String query = "SELECT * FROM Student";
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            System.out.println("ID\tName\tDepartment\tMarks");
            while(rs.next()) {
                System.out.println(rs.getInt("StudentID") + "\t" + rs.getString("Name") + "\t" + rs.getString("Department") + "\t" + rs.getDouble("Marks"));
            }
        } catch(SQLException e) { e.printStackTrace(); }
    }

    public void updateStudent(Student s) {
        String query = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, s.name);
            ps.setString(2, s.department);
            ps.setDouble(3, s.marks);
            ps.setInt(4, s.studentID);
            int updated = ps.executeUpdate();
            if(updated > 0) conn.commit();
            System.out.println(updated > 0 ? "Student updated!" : "Student not found!");
        } catch(SQLException e) {
            try { conn.rollback(); } catch(SQLException ex){ ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void deleteStudent(int id) {
        String query = "DELETE FROM Student WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setInt(1, id);
            int deleted = ps.executeUpdate();
            if(deleted > 0) conn.commit();
            System.out.println(deleted > 0 ? "Student deleted!" : "Student not found!");
        } catch(SQLException e) {
            try { conn.rollback(); } catch(SQLException ex){ ex.printStackTrace(); }
            e.printStackTrace();
        }
    }
}

public class JDBC_MVC_Application {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        DBController db = new DBController("jdbc:mysql://localhost:3306/nimbusdb", "root", "password");

        boolean exit = false;
        while(!exit) {
            System.out.println("\n=== Main Menu ===");
            System.out.println("1. Display Employees");
            System.out.println("2. Product CRUD");
            System.out.println("3. Student Management");
            System.out.println("4. Exit");
            System.out.print("Choose: ");
            int choice = sc.nextInt();

            switch(choice) {
                case 1:
                    db.displayEmployees();
                    break;

                case 2:
                    boolean prodExit = false;
                    while(!prodExit) {
                        System.out.println("\n--- Product Menu ---");
                        System.out.println("1. Add Product");
                        System.out.println("2. View Products");
                        System.out.println("3. Update Product");
                        System.out.println("4. Delete Product");
                        System.out.println("5. Back");
                        System.out.print("Choose: ");
                        int pChoice = sc.nextInt();
                        switch(pChoice) {
                            case 1:
                                System.out.print("ID: "); int pid = sc.nextInt();
                                sc.nextLine();
                                System.out.print("Name: "); String pname = sc.nextLine();
                                System.out.print("Price: "); double price = sc.nextDouble();
                                System.out.print("Quantity: "); int qty = sc.nextInt();
                                db.createProduct(pid, pname, price, qty);
                                break;
                            case 2: db.readProducts(); break;
                            case 3:
                                System.out.print("ID to update: "); int upid = sc.nextInt();
                                sc.nextLine();
                                System.out.print("New Name: "); String upname = sc.nextLine();
                                System.out.print("New Price: "); double upr = sc.nextDouble();
                                System.out.print("New Qty: "); int uqty = sc.nextInt();
                                db.updateProduct(upid, upname, upr, uqty);
                                break;
                            case 4:
                                System.out.print("ID to delete: "); int delid = sc.nextInt();
                                db.deleteProduct(delid);
                                break;
                            case 5: prodExit = true; break;
                        }
                    }
                    break;

                case 3:
                    boolean stuExit = false;
                    while(!stuExit) {
                        System.out.println("\n--- Student Menu ---");
                        System.out.println("1. Add Student");
                        System.out.println("2. View Students");
                        System.out.println("3. Update Student");
                        System.out.println("4. Delete Student");
                        System.out.println("5. Back");
                        System.out.print("Choose: ");
                        int sChoice = sc.nextInt();
                        switch(sChoice) {
                            case 1:
                                System.out.print("ID: "); int sid = sc.nextInt();
                                sc.nextLine();
                                System.out.print("Name: "); String sname = sc.nextLine();
                                System.out.print("Department: "); String dept = sc.nextLine();
                                System.out.print("Marks: "); double marks = sc.nextDouble();
                                db.addStudent(new Student(sid, sname, dept, marks));
                                break;
                            case 2: db.viewStudents(); break;
                            case 3:
                                System.out.print("ID to update: "); int usid = sc.nextInt();
                                sc.next
